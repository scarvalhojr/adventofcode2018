#ip 4

00: seti 123 0 1      => R1 = 123
01: bani 1 456 1      => R1 = R1 & 456
02: eqri 1 72 1       => R1 = R1 == 72
03: addr 1 4 4        => IP = IP + R1 (IF R1 == 72 GOTO 5)
04: seti 0 0 4        => IP = 0 (GOTO 1)
05: seti 0 3 1        => R1 = 0
06: bori 1 65536 2    => R2 = R1 | 65536
07: seti 7902108 7 1  => R1 = 7902108
08: bani 2 255 5      => R5 = R2 & 255
09: addr 1 5 1        => R1 = R1 + R5
10: bani 1 16777215 1 => R1 = R1 & 16777215
11: muli 1 65899 1    => R1 = R1 * 65899
12: bani 1 16777215 1 => R1 = R1 & 16777215
13: gtir 256 2 5      => R5 = 256 > R2
14: addr 5 4 4        => IP = IP + R5 (IF R2 < 256 GOTO 16)
15: addi 4 1 4        => IP = IP + 1 (GOTO 17)
16: seti 27 0 4       => IP = 27 (GOTO 28)
17: seti 0 0 5        => R5 = 0
18: addi 5 1 3        => R3 = R5 + 1
19: muli 3 256 3      => R3 = R3 * 256
20: gtrr 3 2 3        => R3 = R3 > R2
21: addr 3 4 4        => IP = IP + R3 (IF R3 > R2 GOTO 23)
22: addi 4 1 4        => IP = IP + 1 (GOTO 24)
23: seti 25 2 4       => IP = 25 (GOTO 26)
24: addi 5 1 5        => R5 = R5 + 1
25: seti 17 2 4       => IP = 17 (GOTO 18)
26: setr 5 1 2        => R2 = R5
27: seti 7 2 4        => IP = 7 (GOTO 8)
28: eqrr 1 0 5        => R5 = R1 == R0
29: addr 5 4 4        => IP = IP + R5 (IF R1 == R0 HALT)
30: seti 5 9 4        => IP = 5 (GOTO 6)

---

R1 = 123
WHILE R1 /= 72
    R1 = R1 & 456

R1 = 0
LOOP
    R2 = R1 | 65536
    R1 = 7902108
    LOOP
        R5 = R2 & 255
        R1 = R1 + R5
        R1 = R1 & 16777215
        R1 = R1 * 65899
        R1 = R1 & 16777215
        IF R2 < 256 BREAK
        R5 = 0
        LOOP
            R3 = 256 * (R5 + 1)
            IF R3 > R2
                R2 = R5
                BREAK
            R5++
    IF R1 == R0 HALT

---

Instruction 28 halts the program when R1 == R0