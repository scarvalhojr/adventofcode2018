00: addi 2 16 2  =>  IP = 16 (GOTO 17)
01: seti 1 0 1   =>  R1 = 1
02: seti 1 3 3   =>  R3 = 1
03: mulr 1 3 5   =>  R5 = R1 * R3
04: eqrr 5 4 5   =>  R5 = R5 == R4
05: addr 5 2 2   =>  IP = IP + R5 (IF R5 == R4 GOTO 7)
06: addi 2 1 2   =>  IP = 7 (GOTO 8)
07: addr 1 0 0   =>  R0 = R0 + R1
08: addi 3 1 3   =>  R3 = R3 + 1
09: gtrr 3 4 5   =>  R5 = R3 > R4
10: addr 2 5 2   =>  IP = IP + R5 (IF R3 > R4 GOTO 12)
11: seti 2 6 2   =>  IP = 2 (GOTO 3)
12: addi 1 1 1   =>  R1 = R1 + 1
13: gtrr 1 4 5   =>  R5 = R1 > R4
14: addr 5 2 2   =>  IP = IP + R5 (IF R1 > R4 GOTO 16)
15: seti 1 1 2   =>  IP = 1 (GOTO 2)
16: mulr 2 2 2   =>  IP = IP * IP = 256 (HALT)
17: addi 4 2 4   =>  R4 = R4 + 2
18: mulr 4 4 4   =>  R4 = R4 * R4
19: mulr 2 4 4   =>  R4 = R4 * 19 (IP)
20: muli 4 11 4  =>  R4 = R4 * 11
21: addi 5 6 5   =>  R5 = R5 + 6
22: mulr 5 2 5   =>  R5 = R5 * 22 (IP)
23: addi 5 19 5  =>  R5 = R5 + 19
24: addr 4 5 4   =>  R4 = R4 + R5
25: addr 2 0 2   =>  IP = IP + R0 (GOTO ...)
26: seti 0 7 2   =>  IP = 0 (GOTO 1)
27: setr 2 6 5   =>  R5 = 27 (IP)
28: mulr 5 2 5   =>  R5 = R5 * 28 (IP)
29: addr 2 5 5   =>  R5 = R5 + 29 (IP)
30: mulr 2 5 5   =>  R5 = R5 * 30 (IP)
31: muli 5 14 5  =>  R5 = R5 * 14
32: mulr 5 2 5   =>  R5 = R5 * 32 (IP)
33: addr 4 5 4   =>  R4 = R4 + R5
34: seti 0 7 0   =>  R0 = 0
35: seti 0 3 2   =>  IP = 0 (GOTO 1)

---

   GOTO A
C: R1 = 1
I: R3 = 1
G: R5 = R1 * R3
   IF R5 == R4 GOTO D
   GOTO E

D: R0 = R0 + R1
E: R3 = R3 + 1
   IF R3 > R4 GOTO F
   GOTO G

F: R1 = R1 + 1
   IF R1 > R4 GOTO H
   GOTO I

H: HALT

A: R4 = R4 + 2
   R4 = R4 * R4 * 19 * 11
   R5 = R5 + 6
   R5 = R5 * 22 + 19
   R4 = R4 + R5
   IF R0 == 1 GOTO B
   GOTO C

B: R5 = 32 * 14 * 30 * (27 * 28 + 29) = 10550400
   R4 = R4 + R5
   R0 = 0
   GOTO C

---

R4 = 987
IF R0 == 1
    R4 = 10551387
    R0 = 0

R1 = 1
WHILE R1 <= R4
    R3 = 1
    WHILE R3 <= R4
        IF R1 * R3 == R4
            R0 = R0 + R1
        R3++
    R1++

---

R0 = sum of unique divisors of R4 (including 1 and itself)

